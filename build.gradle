plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.165'
}
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

version = "${mc_version}-${mod_version}"
group = 'com.vorquel.similsaxtranstructors' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
base {
    archivesName = "similsaxtranstructors"
}

// Mojang ships Java 21 to end users in 1.20.5+, so your mod should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    // applies to all the run configs below
    configureEach { net.neoforged.gradle.dsl.common.runs.run.Run run ->
        // Recommended logging data for a userdev environment
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        systemProperty 'forge.logging.console.level', 'debug'

        //Limit ram usage for the dev environment to 4GB
        jvmArgument '-Xmx4G'

        if (run.project.javaToolchains.launcherFor(java.toolchain).map { it.metadata.vendor }.getOrElse("").contains("JetBrains")) {
            run.jvmArgument("-XX:+AllowEnhancedClassRedefinition")
        }

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', "${mod_id}"
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', "${mod_id}"
        programArgument '--nogui'
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"

    localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : "Lothrazar",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Lothrazar",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task signJar(type: net.neoforged.gradle.common.tasks.PotentiallySignJar, dependsOn: jar) {

    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    input = jar.archivePath
    output = jar.archivePath
}

task copyJar(type: Copy) {
    from jar
    into "${dist_folder}"
}

task cleanJar {
  delete 'build/libs'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
